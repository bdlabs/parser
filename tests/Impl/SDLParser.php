<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\Tests\Parser\Impl;

use Railt\Lexer\Driver\NativeRegex;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Grammar;
use Railt\Parser\Parser;
use Railt\Parser\Builder\Definition\Alternation;
use Railt\Parser\Builder\Definition\Concatenation;
use Railt\Parser\Builder\Definition\Repetition;
use Railt\Parser\Builder\Definition\Terminal;

/**
 * Class SDLParser
 */
class SDLParser extends Parser
{
    /**
     * JsonParser constructor.
     */
    public function __construct()
    {
        parent::__construct($this->getLexer(), new Grammar([
            0                                 => new Repetition(0, 0, -1, 'Directive', null),
            1                                 => new Repetition(1, 0, -1, 'Definition', null),
            'Document'                        => (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'),
            'Definition'                      => new Alternation('Definition', ['ObjectDefinition', 'InterfaceDefinition', 'EnumDefinition', 'UnionDefinition', 'SchemaDefinition', 'ScalarDefinition', 'InputDefinition', 'ExtendDefinition', 'DirectiveDefinition'], null),
            4                                 => new Terminal(4, 'T_BOOL_TRUE', true),
            5                                 => new Terminal(5, 'T_BOOL_FALSE', true),
            6                                 => new Terminal(6, 'T_NULL', true),
            'ValueKeyword'                    => new Alternation('ValueKeyword', [4, 5, 6], null),
            8                                 => new Terminal(8, 'T_ON', true),
            9                                 => new Terminal(9, 'T_TYPE', true),
            10                                => new Terminal(10, 'T_TYPE_IMPLEMENTS', true),
            11                                => new Terminal(11, 'T_ENUM', true),
            12                                => new Terminal(12, 'T_UNION', true),
            13                                => new Terminal(13, 'T_INTERFACE', true),
            14                                => new Terminal(14, 'T_SCHEMA', true),
            15                                => new Terminal(15, 'T_SCHEMA_QUERY', true),
            16                                => new Terminal(16, 'T_SCHEMA_MUTATION', true),
            17                                => new Terminal(17, 'T_SCHEMA_SUBSCRIPTION', true),
            18                                => new Terminal(18, 'T_SCALAR', true),
            19                                => new Terminal(19, 'T_DIRECTIVE', true),
            20                                => new Terminal(20, 'T_INPUT', true),
            21                                => new Terminal(21, 'T_EXTEND', true),
            'Keyword'                         => new Alternation('Keyword', [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], null),
            'Number'                          => new Terminal('Number', 'T_NUMBER_VALUE', true),
            'Nullable'                        => new Terminal('Nullable', 'T_NULL', true),
            25                                => new Terminal(25, 'T_BOOL_TRUE', true),
            26                                => new Terminal(26, 'T_BOOL_FALSE', true),
            'Boolean'                         => new Alternation('Boolean', [25, 26], null),
            28                                => new Terminal(28, 'T_MULTILINE_STRING', true),
            29                                => new Terminal(29, 'T_STRING', true),
            'String'                          => new Alternation('String', [28, 29], null),
            31                                => new Terminal(31, 'T_NAME', true),
            'Word'                            => new Alternation('Word', [31, 'ValueKeyword'], null),
            33                                => new Terminal(33, 'T_SCHEMA_QUERY', true),
            34                                => new Concatenation(34, [33], 'Name'),
            35                                => new Terminal(35, 'T_SCHEMA_MUTATION', true),
            36                                => new Concatenation(36, [35], 'Name'),
            37                                => new Terminal(37, 'T_SCHEMA_SUBSCRIPTION', true),
            38                                => new Concatenation(38, [37], 'Name'),
            39                                => new Concatenation(39, ['Word'], 'Name'),
            'Name'                            => (new Alternation('Name', [34, 36, 38, 39], null))->setDefaultId('Name'),
            41                                => new Alternation(41, ['String', 'Word', 'Keyword'], null),
            'Key'                             => new Concatenation('Key', [41], 'Name'),
            43                                => new Alternation(43, ['String', 'Number', 'Nullable', 'Keyword', 'Object', 'List', 'Word'], null),
            'Value'                           => new Concatenation('Value', [43], 'Value'),
            'ValueDefinition'                 => new Concatenation('ValueDefinition', ['ValueDefinitionResolver'], null),
            46                                => new Terminal(46, 'T_NON_NULL', true),
            47                                => new Repetition(47, 0, 1, 46, null),
            48                                => new Concatenation(48, ['ValueListDefinition', 47], 'List'),
            49                                => new Terminal(49, 'T_NON_NULL', true),
            50                                => new Repetition(50, 0, 1, 49, null),
            51                                => new Concatenation(51, ['ValueScalarDefinition', 50], 'Type'),
            'ValueDefinitionResolver'         => new Alternation('ValueDefinitionResolver', [48, 51], null),
            53                                => new Terminal(53, 'T_BRACKET_OPEN', false),
            54                                => new Terminal(54, 'T_NON_NULL', true),
            55                                => new Repetition(55, 0, 1, 54, null),
            56                                => new Concatenation(56, ['ValueScalarDefinition', 55], 'Type'),
            57                                => new Terminal(57, 'T_BRACKET_CLOSE', false),
            'ValueListDefinition'             => new Concatenation('ValueListDefinition', [53, 56, 57], null),
            'ValueScalarDefinition'           => new Alternation('ValueScalarDefinition', ['Keyword', 'Word'], null),
            60                                => new Terminal(60, 'T_BRACE_OPEN', false),
            61                                => new Repetition(61, 0, -1, 'ObjectPair', null),
            62                                => new Terminal(62, 'T_BRACE_CLOSE', false),
            'Object'                          => new Concatenation('Object', [60, 61, 62], 'Object'),
            64                                => new Terminal(64, 'T_COLON', false),
            'ObjectPair'                      => new Concatenation('ObjectPair', ['Key', 64, 'Value'], 'ObjectPair'),
            66                                => new Terminal(66, 'T_BRACKET_OPEN', false),
            67                                => new Repetition(67, 0, -1, 'Value', null),
            68                                => new Terminal(68, 'T_BRACKET_CLOSE', false),
            'List'                            => new Concatenation('List', [66, 67, 68], 'List'),
            70                                => new Terminal(70, 'T_MULTILINE_STRING', true),
            'Documentation'                   => new Concatenation('Documentation', [70], 'Description'),
            72                                => new Repetition(72, 0, 1, 'Documentation', null),
            73                                => new Terminal(73, 'T_SCHEMA', true),
            74                                => new Repetition(74, 0, 1, 'Name', null),
            75                                => new Repetition(75, 0, -1, 'Directive', null),
            76                                => new Terminal(76, 'T_BRACE_OPEN', false),
            77                                => new Terminal(77, 'T_BRACE_CLOSE', false),
            'SchemaDefinition'                => (new Concatenation('SchemaDefinition', [72, 73, 74, 75, 76, 'SchemaDefinitionBody', 77], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'),
            79                                => new Alternation(79, ['SchemaDefinitionQuery', 'SchemaDefinitionMutation', 'SchemaDefinitionSubscription'], null),
            'SchemaDefinitionBody'            => new Repetition('SchemaDefinitionBody', 0, -1, 79, null),
            81                                => new Repetition(81, 0, 1, 'Documentation', null),
            82                                => new Terminal(82, 'T_SCHEMA_QUERY', false),
            83                                => new Terminal(83, 'T_COLON', false),
            'SchemaDefinitionQuery'           => new Concatenation('SchemaDefinitionQuery', [81, 82, 83, 'SchemaDefinitionFieldValue'], 'Query'),
            85                                => new Repetition(85, 0, 1, 'Documentation', null),
            86                                => new Terminal(86, 'T_SCHEMA_MUTATION', false),
            87                                => new Terminal(87, 'T_COLON', false),
            'SchemaDefinitionMutation'        => new Concatenation('SchemaDefinitionMutation', [85, 86, 87, 'SchemaDefinitionFieldValue'], 'Mutation'),
            89                                => new Repetition(89, 0, 1, 'Documentation', null),
            90                                => new Terminal(90, 'T_SCHEMA_SUBSCRIPTION', false),
            91                                => new Terminal(91, 'T_COLON', false),
            'SchemaDefinitionSubscription'    => new Concatenation('SchemaDefinitionSubscription', [89, 90, 91, 'SchemaDefinitionFieldValue'], 'Subscription'),
            93                                => new Repetition(93, 0, -1, 'Directive', null),
            'SchemaDefinitionFieldValue'      => new Concatenation('SchemaDefinitionFieldValue', ['ValueDefinition', 93], null),
            95                                => new Repetition(95, 0, 1, 'Documentation', null),
            96                                => new Terminal(96, 'T_SCALAR', false),
            97                                => new Repetition(97, 0, -1, 'Directive', null),
            'ScalarDefinition'                => (new Concatenation('ScalarDefinition', [95, 96, 'Name', 97], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'),
            99                                => new Repetition(99, 0, 1, 'Documentation', null),
            100                               => new Terminal(100, 'T_INPUT', false),
            101                               => new Repetition(101, 0, -1, 'Directive', null),
            102                               => new Terminal(102, 'T_BRACE_OPEN', false),
            103                               => new Repetition(103, 0, -1, 'InputDefinitionField', null),
            104                               => new Terminal(104, 'T_BRACE_CLOSE', false),
            'InputDefinition'                 => (new Concatenation('InputDefinition', [99, 100, 'Name', 101, 102, 103, 104], 'InputDefinition'))->setDefaultId('InputDefinition'),
            106                               => new Repetition(106, 0, 1, 'Documentation', null),
            107                               => new Terminal(107, 'T_COLON', false),
            108                               => new Repetition(108, 0, 1, 'InputDefinitionDefaultValue', null),
            109                               => new Repetition(109, 0, -1, 'Directive', null),
            110                               => new Concatenation(110, ['Key', 107, 'ValueDefinition', 108, 109], null),
            'InputDefinitionField'            => new Concatenation('InputDefinitionField', [106, 110], 'Argument'),
            112                               => new Terminal(112, 'T_EQUAL', false),
            'InputDefinitionDefaultValue'     => new Concatenation('InputDefinitionDefaultValue', [112, 'Value'], null),
            114                               => new Repetition(114, 0, 1, 'Documentation', null),
            115                               => new Terminal(115, 'T_EXTEND', false),
            116                               => new Concatenation(116, ['ObjectDefinition'], 'ExtendDefinition'),
            117                               => new Concatenation(117, ['InterfaceDefinition'], 'ExtendDefinition'),
            118                               => new Concatenation(118, ['EnumDefinition'], 'ExtendDefinition'),
            119                               => new Concatenation(119, ['UnionDefinition'], 'ExtendDefinition'),
            120                               => new Concatenation(120, ['SchemaDefinition'], 'ExtendDefinition'),
            121                               => new Concatenation(121, ['ScalarDefinition'], 'ExtendDefinition'),
            122                               => new Concatenation(122, ['InputDefinition'], 'ExtendDefinition'),
            123                               => new Concatenation(123, ['DirectiveDefinition'], 'ExtendDefinition'),
            124                               => new Alternation(124, [116, 117, 118, 119, 120, 121, 122, 123], null),
            'ExtendDefinition'                => (new Concatenation('ExtendDefinition', [114, 115, 124], null))->setDefaultId('ExtendDefinition'),
            126                               => new Repetition(126, 0, 1, 'Documentation', null),
            127                               => new Terminal(127, 'T_DIRECTIVE', false),
            128                               => new Terminal(128, 'T_DIRECTIVE_AT', false),
            129                               => new Repetition(129, 0, -1, 'DirectiveDefinitionArguments', null),
            130                               => new Terminal(130, 'T_ON', false),
            131                               => new Repetition(131, 1, -1, 'DirectiveDefinitionTargets', null),
            'DirectiveDefinition'             => (new Concatenation('DirectiveDefinition', [126, 127, 128, 'Name', 129, 130, 131], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'),
            133                               => new Terminal(133, 'T_PARENTHESIS_OPEN', false),
            134                               => new Repetition(134, 0, -1, 'DirectiveDefinitionArgument', null),
            135                               => new Terminal(135, 'T_PARENTHESIS_CLOSE', false),
            'DirectiveDefinitionArguments'    => new Concatenation('DirectiveDefinitionArguments', [133, 134, 135], null),
            137                               => new Repetition(137, 0, 1, 'Documentation', null),
            138                               => new Terminal(138, 'T_COLON', false),
            139                               => new Repetition(139, 0, 1, 'DirectiveDefinitionDefaultValue', null),
            140                               => new Repetition(140, 0, -1, 'Directive', null),
            'DirectiveDefinitionArgument'     => new Concatenation('DirectiveDefinitionArgument', [137, 'Key', 138, 'ValueDefinition', 139, 140], 'Argument'),
            142                               => new Terminal(142, 'T_OR', false),
            143                               => new Concatenation(143, [142, 'Key'], null),
            144                               => new Repetition(144, 0, -1, 143, null),
            'DirectiveDefinitionTargets'      => new Concatenation('DirectiveDefinitionTargets', ['Key', 144], 'Target'),
            146                               => new Terminal(146, 'T_EQUAL', false),
            'DirectiveDefinitionDefaultValue' => new Concatenation('DirectiveDefinitionDefaultValue', [146, 'Value'], null),
            148                               => new Repetition(148, 0, 1, 'Documentation', null),
            149                               => new Terminal(149, 'T_TYPE', false),
            150                               => new Repetition(150, 0, 1, 'ObjectDefinitionImplements', null),
            151                               => new Repetition(151, 0, -1, 'Directive', null),
            152                               => new Terminal(152, 'T_BRACE_OPEN', false),
            153                               => new Repetition(153, 0, -1, 'ObjectDefinitionField', null),
            154                               => new Terminal(154, 'T_BRACE_CLOSE', false),
            'ObjectDefinition'                => (new Concatenation('ObjectDefinition', [148, 149, 'Name', 150, 151, 152, 153, 154], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'),
            156                               => new Terminal(156, 'T_TYPE_IMPLEMENTS', false),
            157                               => new Repetition(157, 0, -1, 'Key', null),
            158                               => new Terminal(158, 'T_AND', false),
            159                               => new Concatenation(159, [158, 'Key'], null),
            160                               => new Repetition(160, 0, 1, 159, null),
            'ObjectDefinitionImplements'      => new Concatenation('ObjectDefinitionImplements', [156, 157, 160], 'Implements'),
            162                               => new Repetition(162, 0, 1, 'Documentation', null),
            163                               => new Repetition(163, 0, 1, 'Arguments', null),
            164                               => new Terminal(164, 'T_COLON', false),
            165                               => new Concatenation(165, ['Key', 163, 164, 'ObjectDefinitionFieldValue'], null),
            'ObjectDefinitionField'           => new Concatenation('ObjectDefinitionField', [162, 165], 'Field'),
            167                               => new Repetition(167, 0, -1, 'Directive', null),
            'ObjectDefinitionFieldValue'      => new Concatenation('ObjectDefinitionFieldValue', ['ValueDefinition', 167], null),
            169                               => new Repetition(169, 0, 1, 'Documentation', null),
            170                               => new Terminal(170, 'T_INTERFACE', false),
            171                               => new Repetition(171, 0, -1, 'Directive', null),
            172                               => new Terminal(172, 'T_BRACE_OPEN', false),
            173                               => new Repetition(173, 0, -1, 'InterfaceDefinitionBody', null),
            174                               => new Terminal(174, 'T_BRACE_CLOSE', false),
            'InterfaceDefinition'             => (new Concatenation('InterfaceDefinition', [169, 170, 'Name', 171, 172, 173, 174], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'),
            176                               => new Terminal(176, 'T_COLON', false),
            177                               => new Repetition(177, 0, -1, 'Directive', null),
            178                               => new Concatenation(178, ['InterfaceDefinitionFieldKey', 176, 'ValueDefinition', 177], null),
            'InterfaceDefinitionBody'         => new Concatenation('InterfaceDefinitionBody', [178], 'Field'),
            180                               => new Repetition(180, 0, 1, 'Documentation', null),
            181                               => new Repetition(181, 0, 1, 'Arguments', null),
            'InterfaceDefinitionFieldKey'     => new Concatenation('InterfaceDefinitionFieldKey', [180, 'Key', 181], null),
            183                               => new Repetition(183, 0, 1, 'Documentation', null),
            184                               => new Terminal(184, 'T_ENUM', false),
            185                               => new Repetition(185, 0, -1, 'Directive', null),
            186                               => new Terminal(186, 'T_BRACE_OPEN', false),
            187                               => new Repetition(187, 0, -1, 'EnumField', null),
            188                               => new Terminal(188, 'T_BRACE_CLOSE', false),
            'EnumDefinition'                  => (new Concatenation('EnumDefinition', [183, 184, 'Name', 185, 186, 187, 188], 'EnumDefinition'))->setDefaultId('EnumDefinition'),
            190                               => new Repetition(190, 0, 1, 'Documentation', null),
            191                               => new Repetition(191, 0, -1, 'Directive', null),
            192                               => new Concatenation(192, ['EnumValue', 191], null),
            'EnumField'                       => new Concatenation('EnumField', [190, 192], 'Value'),
            194                               => new Terminal(194, 'T_NAME', true),
            195                               => new Alternation(195, [194, 'Keyword'], null),
            'EnumValue'                       => new Concatenation('EnumValue', [195], 'Name'),
            197                               => new Repetition(197, 0, 1, 'Documentation', null),
            198                               => new Terminal(198, 'T_UNION', false),
            199                               => new Repetition(199, 0, -1, 'Directive', null),
            200                               => new Terminal(200, 'T_EQUAL', false),
            'UnionDefinition'                 => (new Concatenation('UnionDefinition', [197, 198, 'Name', 199, 200, 'UnionBody'], 'UnionDefinition'))->setDefaultId('UnionDefinition'),
            202                               => new Terminal(202, 'T_OR', false),
            203                               => new Repetition(203, 0, 1, 202, null),
            204                               => new Repetition(204, 1, -1, 'UnionUnitesList', null),
            'UnionBody'                       => new Concatenation('UnionBody', [203, 204], 'Relations'),
            206                               => new Terminal(206, 'T_OR', false),
            207                               => new Concatenation(207, [206, 'Name'], null),
            208                               => new Repetition(208, 0, -1, 207, null),
            'UnionUnitesList'                 => new Concatenation('UnionUnitesList', ['Name', 208], null),
            210                               => new Terminal(210, 'T_PARENTHESIS_OPEN', false),
            211                               => new Repetition(211, 0, -1, 'ArgumentPair', null),
            212                               => new Terminal(212, 'T_PARENTHESIS_CLOSE', false),
            'Arguments'                       => new Concatenation('Arguments', [210, 211, 212], null),
            214                               => new Repetition(214, 0, 1, 'Documentation', null),
            215                               => new Terminal(215, 'T_COLON', false),
            216                               => new Repetition(216, 0, 1, 'ArgumentDefaultValue', null),
            217                               => new Repetition(217, 0, -1, 'Directive', null),
            'ArgumentPair'                    => new Concatenation('ArgumentPair', [214, 'Key', 215, 'ValueDefinition', 216, 217], 'Argument'),
            'ArgumentValue'                   => new Concatenation('ArgumentValue', ['ValueDefinition'], 'Type'),
            220                               => new Terminal(220, 'T_EQUAL', false),
            'ArgumentDefaultValue'            => new Concatenation('ArgumentDefaultValue', [220, 'Value'], null),
            222                               => new Terminal(222, 'T_DIRECTIVE_AT', false),
            223                               => new Repetition(223, 0, 1, 'DirectiveArguments', null),
            'Directive'                       => (new Concatenation('Directive', [222, 'Name', 223], 'Directive'))->setDefaultId('Directive'),
            225                               => new Terminal(225, 'T_PARENTHESIS_OPEN', false),
            226                               => new Repetition(226, 0, -1, 'DirectiveArgumentPair', null),
            227                               => new Terminal(227, 'T_PARENTHESIS_CLOSE', false),
            'DirectiveArguments'              => new Concatenation('DirectiveArguments', [225, 226, 227], null),
            229                               => new Terminal(229, 'T_COLON', false),
            'DirectiveArgumentPair'           => new Concatenation('DirectiveArgumentPair', ['Key', 229, 'Value'], 'Argument'),
        ], 'Document'));
    }

    /**
     * @return LexerInterface
     */
    public function getLexer(): LexerInterface
    {
        return new NativeRegex([
            'T_NON_NULL'            => '!',
            'T_VAR'                 => '\$',
            'T_PARENTHESIS_OPEN'    => '\(',
            'T_PARENTHESIS_CLOSE'   => '\)',
            'T_THREE_DOTS'          => '\.\.\.',
            'T_COLON'               => ':',
            'T_EQUAL'               => '=',
            'T_DIRECTIVE_AT'        => '@',
            'T_BRACKET_OPEN'        => '\[',
            'T_BRACKET_CLOSE'       => '\]',
            'T_BRACE_OPEN'          => '{',
            'T_BRACE_CLOSE'         => '}',
            'T_OR'                  => '\|',
            'T_AND'                 => '\&',
            'T_NUMBER_VALUE'        => '\-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][\+\-]?[0-9]+)?\b',
            'T_BOOL_TRUE'           => 'true\b',
            'T_BOOL_FALSE'          => 'false\b',
            'T_NULL'                => 'null\b',
            'T_MULTILINE_STRING'    => '"""(?:\\\"""|(?!""").|\s)*"""',
            'T_STRING'              => '"[^"\\\]*(\\\.[^"\\\]*)*"',
            'T_EXTENDS'             => 'extends\b',
            'T_TYPE_IMPLEMENTS'     => 'implements\b',
            'T_ON'                  => 'on\b',
            'T_TYPE'                => 'type\b',
            'T_ENUM'                => 'enum\b',
            'T_UNION'               => 'union\b',
            'T_INTERFACE'           => 'interface\b',
            'T_SCHEMA'              => 'schema\b',
            'T_SCHEMA_QUERY'        => 'query\b',
            'T_SCHEMA_MUTATION'     => 'mutation\b',
            'T_SCHEMA_SUBSCRIPTION' => 'subscription\b',
            'T_SCALAR'              => 'scalar\b',
            'T_DIRECTIVE'           => 'directive\b',
            'T_INPUT'               => 'input\b',
            'T_EXTEND'              => 'extend\b',
            'T_NAME'                => '([_A-Za-z][_0-9A-Za-z]*)',
            'T_VARIABLE'            => '(\$[_A-Za-z][_0-9A-Za-z]*)',
            'skip'                  => '(?:(?:[\xfe\xff|\x20|\x09|\x0a|\x0d]+|#[^\n]*)|,)',
        ], ['skip']);
    }
}
